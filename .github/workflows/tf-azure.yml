name: "AZURE Infra"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  provision-az-vm:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
          working-directory: ./terraform/azure

    steps:
      # Checkout repo
      - uses: actions/checkout@v3

      
      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: 'eu-west-1'

      # Configure AZURE  credentials
      - name: Login to Azure
        uses: azure/login@v1
        with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         allow-no-subscriptions: false
        

      # Terraform Setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # # Save instance IPs and create inventory file for Ansible
      # - name: Save instance IPs and create inventory
      #   run: |
      #     INSTANCE_IPS=$(terraform output -json public_ip_address)
      #     echo "$INSTANCE_IPS" 
      #     echo "$INSTANCE_IPS" | jq -r '.[]' > ansible/instance-ips.txt
      #     echo "[servers]" > ansible/inventory.ini
      #     while IFS= read -r ip; do
      #       echo "$ip ansible_user=devadmin ansible_ssh_private_key_file=./scripts/azure_key.pem" >> ansible/inventory.ini
      #     done < ansible/instance-ips.txt

      # Save instance IPs and create inventory file for Ansible
      - name: Save instance IPs and create inventory
        run: |
          INSTANCE_IPS=$(terraform output -json public_ip_address)

          # Check if it's a JSON array or a string
          if echo "$INSTANCE_IPS" | jq -e 'if type == "string" then empty else . end' >/dev/null; then
            IP_LIST=$(echo "$INSTANCE_IPS" | jq -r '.[]')
          else
            IP_LIST=$(echo "$INSTANCE_IPS" | jq -r '.')
          fi

          # Create inventory.ini
          echo "[servers]" > inventory.ini
          echo "$IP_LIST ansible_user=devadmin ansible_ssh_private_key_file=./scripts/azure_key.pem" >> inventory.ini

      # # Wait for SSH to be available
      # - name: Wait for SSH to be available
      #   run: |
      #     for ip in $(cat ansible/instance-ips.txt); do
      #       echo "⏳ Waiting for SSH on $ip..."
      #       SECONDS=0
      #       while ! nc -z $ip 22; do
      #         sleep 10
      #         if [ $SECONDS -gt 300 ]; then
      #           echo "❌ Timeout: SSH is not available on $ip after 5 minutes."
      #           exit 1
      #         fi
      #       done
      #       echo "✅ SSH is available on $ip!"
      #     done

      # #  Add SSH Key from GitHub Secrets
      # - name: Add SSH Key
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/azure_key.pem
      #     chmod 400 ~/.ssh/azure_key.pem

      # # Test SSH connection
      # - name: Test SSH connection
      #   run: |
      #     INSTANCE_IP=$(terraform output -json instance_ips | jq -r '.[0]')
      #     echo "Trying to SSH into $INSTANCE_IP"
      #     ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/azure_key.pem devadmin@$INSTANCE_IP

      # Install Ansible
      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      #Run Ansible Playbook
      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.ini ./scripts/install_k3s.yml -vvv